import os
import pandas as pd
from goatools import obo_parser
import os
from goatools.obo_parser import GODag
from goatools.base import download_go_basic_obo

def parse_go_annotations(annotation_file):
    """
    Parse a GO annotation file to create a dictionary
    mapping protein IDs and their associated GO terms.
    """
    go_annotation = {}
    with open(annotation_file, "r") as file:
        for line in file:
            if line.startswith("!"):  
                continue
            fields = line.strip().split("\t")
            protein_id = fields[1]  #protein ID (column 2 in GAF)
            function = fields[8]  #function type (column 9 in GAF)
            if function != "C":  #filter for location information
                continue
            go_term = fields[4]     #GO term (column 5 in GAF)
            if protein_id not in go_annotation:
                go_annotation[protein_id] = []
            go_annotation[protein_id].append(go_term)
    return go_annotation

def load_obo():
    '''
    load the latest obo file to exchange the GO terms with their aspects
    '''
    obo_path = "pipeline/go.obo"
    if not os.path.exists(obo_path):
        obo_path = download_go_basic_obo()  
    # Load the GO DAG
    go_dag = GODag(obo_path)
    return go_dag

# Load the GO ontology file (e.g., gene_ontology.obo)
go_obo = load_obo()



name = "Homo_sapiens" 

# Set the working directory
working_dir = os.path.dirname("pipeline/output/output_20250519_142700_machine_learning_human/" + name + "/")
feature_matrix_path = working_dir + "/feature_matrix.csv"
# Read the feature matrix from the CSV file
feature_matrix = pd.read_csv(feature_matrix_path, index_col=0)
print(feature_matrix.head())
# Add GO terms to the feature matrix

#valid_go_term_file = "pipeline/output/output_20250515_105213/Homo_sapiens/child_terms.txt"
valid_go_term_file = "pipeline/output/output_20250519_142700_machine_learning_human/Homo_sapiens/membrane_bound_organelle_child_terms_names.txt"
# Parse the valid GO terms from the file
with open(valid_go_term_file, "r") as file:
    valid_go_terms = set(line.strip().split("_")[0] for line in file)

# Parse GO annotations
annotation_file = "pipeline/input/Homo_sapiens.goa"
go_annotations = parse_go_annotations(annotation_file)

# Add filtered GO terms rowwise to the feature matrix
filtered_go_annotations = {}

for protein_id, row in feature_matrix.iterrows():
    if protein_id in go_annotations:
        filtered_terms = [term for term in go_annotations[protein_id] if term in valid_go_terms]
        feature_matrix.at[protein_id, "GO_Term"] = ",".join(filtered_terms)

# Filter rows to keep only those containing the GO term GO:0005739
#feature_matrix = feature_matrix[feature_matrix["GO_Term"].str.contains("GO:0005739", na=False)]

# Remove duplicate GO terms in each row
feature_matrix["GO_Term"] = feature_matrix["GO_Term"].apply(
    lambda x: ",".join(sorted(set(x.split(",")))) if pd.notna(x) else x
)
'''
# Remove the GO term GO:0005739 from the GO_Term column
feature_matrix["GO_Term"] = feature_matrix["GO_Term"].apply(
    lambda x: ",".join(term for term in x.split(",") if term != "GO:0005739") if pd.notna(x) else x
)'''

# if a protein has multiple go terms, copy the row and assign the go term to the new row
# and remove the go term from the original row
feature_matrix["GO_Term"] = feature_matrix["GO_Term"].apply(
    lambda x: x.split(",") if pd.notna(x) else x
)

feature_matrix = feature_matrix.explode("GO_Term")


# Remove rows with more than one or no GO term
feature_matrix = feature_matrix[feature_matrix["GO_Term"].apply(lambda x: isinstance(x, str) and len(x.split(",")) == 1)]

# Remove rows with an empty GO term
'''for index, row in feature_matrix.iterrows():
    if isinstance(row["GO_Term"], str):
        terms = row["GO_Term"].split(",")
        if len(terms) == 1 and terms[0] == "":
            feature_matrix.drop(index, inplace=True)'''

# moves the go term column to the beginning of the DataFrame
go_term_column = feature_matrix.pop("GO_Term")
feature_matrix.insert(0, "GO_Term", go_term_column)
# Save the updated feature matrix to a CSV file
output_path = working_dir + "/feature_matrix_with_go_terms.csv"
feature_matrix.to_csv(output_path)


